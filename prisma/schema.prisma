// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @default(autoincrement()) @id
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?
  delete_status Boolean @default(false)
}

model Project {
  id        Int     @id @default(autoincrement())
  title      String
  description String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?
  deleteStatus Boolean @default(false)

  //Relations
  epics Epic[]
  requests Request[]
  issues Issue[]
}

model Epic {
  id        Int     @id @default(autoincrement())
  title      String
  tag       String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?
  deleteStatus Boolean @default(false)

  //Relations
  project Project @relation(fields: [projectId], references: [id])
  projectId Int

  requests Request[]
}

model Request {
  id        Int     @id @default(autoincrement()) 
  title     String
  description String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?
  deleteStatus Boolean @default(false)

  //Relations
  epic Epic? @relation(fields: [epicId], references: [id], onDelete: SetNull)
  epicId Int?

  project Project @relation(fields: [projectId], references: [id])
  projectId Int

  issues Issue[]
  comments Comment[]
}

model Issue {
  id        Int       @id @default(autoincrement()) 
  title     String
  description String?
  timeForEstimation Float
  estimation Float
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?
  deleteStatus Boolean @default(false)

  //Relations
  request Request @relation(fields: [requestId], references: [id])
  requestId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int

  comments Comment[]
}

model Comment {
  id        Int     @id @default(autoincrement()) 
  content      String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  deletedAt DateTime?
  deleteStatus Boolean @default(false)

  //Relations
  request Request? @relation(fields: [requestId], references: [id])
  requestId Int?

  issue Issue? @relation(fields: [issueId], references: [id])
  issueId Int?
  
  commentType CommentType @relation(fields: [commentTypeId], references: [id])
  commentTypeId Int
}

model CommentType {
  id        Int      @id @default(autoincrement()) 
  type      String

  comments Comment[]
}